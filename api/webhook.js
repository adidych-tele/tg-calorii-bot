// Vercel Serverless Function (Node 18+)
// ENV required: BOT_TOKEN, OPENAI_API_KEY

const BOT_TOKEN = process.env.BOT_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

const TG_API = BOT_TOKEN ? `https://api.telegram.org/bot${BOT_TOKEN}` : null;
const TG_FILE = BOT_TOKEN ? `https://api.telegram.org/file/bot${BOT_TOKEN}` : null;

const FREE_DAILY_LIMIT = 5;      // 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ñ–æ—Ç–æ/–¥–µ–Ω—å
const DEFAULT_ACTIVITY_K = 1.4;  // —Ñ–æ—Ä–º—É–ª–∞: –≤–µ—Å √ó 24 √ó K

// MVP-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏ (–ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –¥–µ–ø–ª–æ—è —Å–±—Ä–æ—Å–∏—Ç—Å—è)
const usage = new Map(); // {chatId:{day,freeCount,credits}}
const users = new Map(); // {chatId:{weightKg,activityK,dailyTarget,consumedToday,lastReset,_awaitingWeight,_awaitingPortionG,_lastAnalysis}}
const lastTips = new Map(); // {chatId:[tips...]}

module.exports = async (req, res) => {
  try {
    if (req.method !== 'POST') {
      // health/ping
      res.status(200).send('OK');
      return;
    }

    // --- –±–µ–∑–æ–ø–∞—Å–Ω–æ —á–∏—Ç–∞–µ–º JSON —Ç–µ–ª–æ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ req.body –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç) ---
    const update = await readJsonBody(req);
    if (!update) {
      console.error('Empty or invalid JSON body');
      res.status(200).json({ ok: true });
      return;
    }

    // --- –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ ENV (–≤ –ª–æ–≥–∞—Ö –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ) ---
    if (!BOT_TOKEN || !OPENAI_API_KEY) {
      console.error('Missing ENV:', { hasBotToken: !!BOT_TOKEN, hasOpenAI: !!OPENAI_API_KEY });
      // –æ—Ç–≤–µ—Ç–∏–º 200, —á—Ç–æ–±—ã Telegram –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
      res.status(200).json({ ok: true });
      return;
    }

    // ============== PAYMENTS (–∑–∞–≥–ª—É—à–∫–∏ –ø–æ–¥ Stars) ==============
    if (update.pre_checkout_query) {
      await safeFetch(`${TG_API}/answerPreCheckoutQuery`, {
        method: 'POST',
        headers: jsonHeaders(),
        body: JSON.stringify({ pre_checkout_query_id: update.pre_checkout_query.id, ok: true })
      });
      res.status(200).json({ ok: true });
      return;
    }
    if (update.message && update.message.successful_payment) {
      const chat_id = update.message.chat.id;
      bumpCredits(chat_id, 50); // –ø—Ä–∏–º–µ—Ä
      await sendMessage(chat_id, `–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ –Ø –¥–æ–±–∞–≤–∏–ª 50 –∞–Ω–∞–ª–∏–∑–æ–≤ –Ω–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å.`);
      res.status(200).json({ ok: true });
      return;
    }

    // ============== CALLBACKS ==============
    if (update.callback_query) {
      const cq = update.callback_query;
      const chat_id = cq.message.chat.id;
      const data = cq.data || '';

      try {
        if (data === 'how') {
          await sendMessage(chat_id, howItWorksText());
        } else if (data === 'tips') {
          const tips = lastTips.get(String(chat_id));
          if (Array.isArray(tips) && tips.length) {
            await sendMessage(chat_id, formatTips(tips));
          } else {
            await sendMessage(chat_id, `–°–æ–≤–µ—Ç—ã –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤—ã. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ –µ—â—ë —Ä–∞–∑ ‚Äî —è –∏—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é.`);
          }
        } else if (data.startsWith('portion:')) {
          await handlePortionCallback(chat_id, data);
        } else if (data === 'portion:manual') {
          const u = getUser(chat_id);
          u._awaitingPortionG = true;
          setUser(chat_id, u);
          await sendMessage(chat_id, '–í–≤–µ–¥–∏ –≥—Ä–∞–º–º—ã —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 25');
        } else if (data === 'next') {
          await sendMessage(chat_id, '–û–∫! –ü—Ä–∏—à–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ üì∏');
        } else if (data.startsWith('buy:')) {
          await sendMessage(chat_id, '–û–ø–ª–∞—Ç–∞ –ø–∞–∫–µ—Ç–∞–º–∏ —Å–∫–æ—Ä–æ –±—É–¥–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞ ‚≠ê');
        } else if (data === 'diary:add') {
          await sendMessage(chat_id, '–ó–±–µ—Ä–µ–∂—É –≤ –¥–µ–Ω–Ω–∏–∫ —É –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó üóíÔ∏è');
        } else if (data === 'remind:morning') {
          await sendMessage(chat_id, '–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞–º–æ –≤ /settings –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º ‚è∞');
        }
      } catch (e) {
        console.error('callback error', e);
      } finally {
        await answerCallbackQuery(cq.id);
        res.status(200).json({ ok: true });
        return;
      }
    }

    // ============== MESSAGES ==============
    if (update.message) {
      const msg = update.message;
      const chat_id = msg.chat.id;

      // ---- –¢–ï–ö–°–¢ ----
      if (msg.text) {
        const text = (msg.text || '').trim();

        if (text === '/start') {
          await sendMessage(chat_id,
`–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ—Å—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏ –ø–æ —Ñ–æ—Ç–æ üçΩÔ∏è
–ß—Ç–æ–±—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å ¬´—Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è¬ª, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–µ—Å (–≤ –∫–≥).

–ù–∞–ø—Ä–∏–º–µ—Ä: 72`,
            { inline_keyboard: [[{ text: '‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç', callback_data: 'how' }]] }
          );
          res.status(200).json({ ok: true });
          return;
        }

        if (text === '/help') {
          await sendMessage(chat_id, howItWorksText());
          res.status(200).json({ ok: true });
          return;
        }

        if (text === '/stats') {
          const { freeCount, credits } = getUsage(chat_id);
          const u = getUser(chat_id);
          const consumed = u.consumedToday ?? 0;
          const daily = u.dailyTarget ?? null;
          const leftKcal = daily ? Math.max(0, daily - consumed) : null;
          await sendMessage(chat_id,
`–°–µ–≥–æ–¥–Ω—è: ${freeCount}/${FREE_DAILY_LIMIT} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤.
–ü–ª–∞—Ç–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã: ${credits}.
–°—ä–µ–¥–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ~${consumed} –∫–∫–∞–ª${leftKcal!==null ? `, –æ—Å—Ç–∞–ª–æ—Å—å ~${leftKcal} –∫–∫–∞–ª` : ''}.`);
          res.status(200).json({ ok: true });
          return;
        }

        if (text === '/weight') {
          const u = getUser(chat_id);
          u._awaitingWeight = true;
          setUser(chat_id, u);
          await sendMessage(chat_id, `–¢–µ–∫—É—â–∏–π –≤–µ—Å: ${u.weightKg ?? '–Ω–µ –∑–∞–¥–∞–Ω'} –∫–≥. –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≤–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70):`);
          res.status(200).json({ ok: true });
          return;
        }

        // –∂–¥—ë–º –≤–µ—Å?
        const uWait = getUser(chat_id);
        if (uWait._awaitingWeight) {
          const kg = extractNumberKg(text);
          if (kg) {
            uWait._awaitingWeight = false;
            uWait.weightKg = kg;
            uWait.activityK = uWait.activityK || DEFAULT_ACTIVITY_K;
            uWait.dailyTarget = Math.round(kg * 24 * uWait.activityK);
            setUser(chat_id, uWait);
            await sendMessage(chat_id, `–ì–æ—Ç–æ–≤–æ! –¢–≤–æ—è –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: ~${uWait.dailyTarget} –∫–∫–∞–ª (—Ñ–æ—Ä–º—É–ª–∞: –≤–µ—Å√ó24√ó1.4).
–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ ‚Äî –ø–æ—Å—á–∏—Ç–∞—é –∏ –ø–æ–∫–∞–∂—É –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.`);
          } else {
            await sendMessage(chat_id, `–ù–µ –ø–æ–Ω—è–ª –≤–µ—Å. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 72`);
          }
          res.status(200).json({ ok: true });
          return;
        }

        // –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å–ª–∞–ª –≤–µ—Å —á–∏—Å–ª–æ–º
        const maybeKg = extractNumberKg(text);
        if (maybeKg) {
          const u = getUser(chat_id);
          u.weightKg = maybeKg;
          u.activityK = u.activityK || DEFAULT_ACTIVITY_K;
          u.dailyTarget = Math.round(maybeKg * 24 * u.activityK);
          setUser(chat_id, u);
          await sendMessage(chat_id, `–û—Ç–ª–∏—á–Ω–æ! –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: ~${u.dailyTarget} –∫–∫–∞–ª. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ ‚Äî –ø–æ—Å—á–∏—Ç–∞—é –∏ –ø–æ–∫–∞–∂—É –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.`);
          res.status(200).json({ ok: true });
          return;
        }

        // –ø—Ä–æ—á–∏–π —Ç–µ–∫—Å—Ç
        await sendMessage(chat_id, `–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –±–ª—é–¥–∞ üì∏`);
        res.status(200).json({ ok: true });
        return;
      }

      // ---- –§–û–¢–û / –î–û–ö–£–ú–ï–ù–¢-–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï ----
      let fileId = null;

      if (msg.photo && msg.photo.length) {
        const largest = msg.photo[msg.photo.length - 1];
        fileId = largest.file_id;
      } else if (msg.document && msg.document.mime_type && msg.document.mime_type.startsWith('image/')) {
        fileId = msg.document.file_id;
      }

      if (fileId) {
        dailyReset(chat_id);

        const can = canSpendAnalysis(chat_id);
        if (!can.allowed) {
          await sendMessage(chat_id,
`–°–µ–≥–æ–¥–Ω—è –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω (${FREE_DAILY_LIMIT}/${FREE_DAILY_LIMIT}) üö¶
–ó–∞–≤—Ç—Ä–∞ —Å–Ω–æ–≤–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ üéâ

–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–µ–π—á–∞—Å? –ü–∞–∫–µ—Ç—ã –æ–ø–ª–∞—Ç –¥–æ–±–∞–≤–∏–º —Å–∫–æ—Ä–æ ‚≠ê`);
          res.status(200).json({ ok: true });
          return;
        }
        spendOne(chat_id);

        const { ok, file_path, debug } = await safeGetFilePath(fileId);
        if (!ok || !file_path) {
          console.error('getFile error', debug);
          await sendMessage(chat_id, `–ù–µ —Å–º–æ–≥ —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ ¬´–§–æ—Ç–æ¬ª, –∞ –Ω–µ ¬´–§–∞–π–ª¬ª, –ª–∏–±–æ –µ—â—ë —Ä–∞–∑.`);
          res.status(200).json({ ok: true });
          return;
        }
        const fileUrl = `${TG_FILE}/${file_path}`;

        const analysis = await analyzeImageWithOpenAI(fileUrl);
        if (analysis?.error === 'not_food') {
          await sendMessage(chat_id, `–ü–æ—Ö–æ–∂–µ, –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ –µ–¥–∞ üôÇ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ —Å–≤–µ—Ä—Ö—É, –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏.`);
          res.status(200).json({ ok: true });
          return;
        }
        if (!analysis) {
          await sendMessage(chat_id, `–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Ä–∞–∫—É—Ä—Å –∏–ª–∏ —è—Ä—á–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ.`);
          res.status(200).json({ ok: true });
          return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑
        const u = getUser(chat_id);
        u._lastAnalysis = analysis;
        setUser(chat_id, u);

        // –£—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π –∏ –æ—Å—Ç–∞—Ç–∫–∞
        const kcal = Math.max(0, Math.round(analysis.calories_estimate || 0));
        u.consumedToday = (u.consumedToday || 0) + kcal;
        setUser(chat_id, u);
        const remaining = u.dailyTarget != null ? Math.max(0, u.dailyTarget - u.consumedToday) : null;

        if (Array.isArray(analysis.tips)) lastTips.set(String(chat_id), analysis.tips);

        // –°–æ–æ–±—â–µ–Ω–∏–µ ‚Ññ1 ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const text = formatMealMessage(analysis, remaining, u.dailyTarget);
        await sendMessage(chat_id, text, {
          inline_keyboard: [[{ text: 'üîÅ –•–æ—á—É —Å–æ–≤–µ—Ç—ã', callback_data: 'tips' }]]
        });

        // –ù–µ–±–æ–ª—å—à–∞—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞
        await sleep(700);

        // –°–æ–æ–±—â–µ–Ω–∏–µ ‚Ññ2 ‚Äî follow-up / —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ü–∏–∏
        const followup = buildFollowup(chat_id, u, analysis);
        await sendMessage(chat_id, followup.text, followup.keyboard);

        res.status(200).json({ ok: true });
        return;
      }

      // –Ω–µ —Ç–µ–∫—Å—Ç –∏ –Ω–µ —Ñ–æ—Ç–æ
      await sendMessage(chat_id, `–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –±–ª—é–¥–∞ üì∏`);
      res.status(200).json({ ok: true });
      return;
    }

    // –Ω–∏—á–µ–≥–æ –∏–∑ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –Ω–µ –ø—Ä–∏—à–ª–æ
    res.status(200).json({ ok: true });
  } catch (e) {
    console.error('handler error', e);
    // –≤—Å–µ–≥–¥–∞ 200, —á—Ç–æ–±—ã TG –Ω–µ –¥–æ–ª–±–∏–ª —Ä–µ—Ç—Ä–∞—è–º–∏
    res.status(200).json({ ok: true });
  }
};

// -------------------- helpers: transport --------------------
async function readJsonBody(req) {
  try {
    if (req.body) {
      if (typeof req.body === 'string') return JSON.parse(req.body);
      if (typeof req.body === 'object') return req.body;
    }
    // –¥–æ—á–∏—Ç–∞—Ç—å –ø–æ—Ç–æ–∫ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    const raw = await readStream(req);
    if (!raw) return null;
    return JSON.parse(raw);
  } catch (e) {
    console.error('readJsonBody error', e);
    return null;
  }
}
function readStream(req) {
  return new Promise(resolve => {
    let data = '';
    req.on('data', chunk => (data += chunk));
    req.on('end', () => resolve(data));
    req.on('error', () => resolve(null));
  });
}
function jsonHeaders() {
  return { 'Content-Type': 'application/json' };
}
async function safeFetch(url, opts) {
  try {
    const r = await fetch(url, opts);
    const text = await r.text().catch(() => '');
    if (!r.ok) console.error('fetch not ok', { url, status: r.status, text });
    return { ok: r.ok, status: r.status, text };
  } catch (e) {
    console.error('fetch error', { url, e });
    return { ok: false, status: 0, text: String(e) };
  }
}
async function sendMessage(chat_id, text, replyMarkup) {
  if (!TG_API) return;
  const body = { chat_id, text };
  if (replyMarkup) body.reply_markup = replyMarkup;
  await safeFetch(`${TG_API}/sendMessage`, {
    method: 'POST',
    headers: jsonHeaders(),
    body: JSON.stringify(body)
  });
}
async function answerCallbackQuery(id) {
  if (!TG_API) return;
  await safeFetch(`${TG_API}/answerCallbackQuery`, {
    method: 'POST',
    headers: jsonHeaders(),
    body: JSON.stringify({ callback_query_id: id })
  });
}
async function safeGetFilePath(file_id) {
  try {
    const r = await fetch(`${TG_API}/getFile?file_id=${encodeURIComponent(file_id)}`);
    const j = await r.json();
    if (j && j.ok && j.result && j.result.file_path) {
      return { ok: true, file_path: j.result.file_path, debug: j };
    }
    return { ok: false, file_path: null, debug: j || null };
  } catch (e) {
    return { ok: false, file_path: null, debug: { error: String(e) } };
  }
}
function sleep(ms) { return new Promise(r => setTimeout(r, ms)); }

// -------------------- OpenAI Vision --------------------
async function analyzeImageWithOpenAI(imageUrl) {
  try {
    const systemPrompt = `
–¢—ã ‚Äì –¥–∏–µ—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ù–∞ –≤—Ö–æ–¥–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ –±–ª—é–¥–∞.
–û—Ü–µ–Ω–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ –∫–∞–ª–æ—Ä–∏–∏ –∏ –º–∞–∫—Ä–æ—Å—ã –Ω–∞ –ø—Ä–∏–≤—ã—á–Ω—É—é –ø–æ—Ä—Ü–∏—é. –°–æ–≤–µ—Ç—ã –¥–∞–π –∫—Ä–∞—Ç–∫–æ (–Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–π –∏—Ö, —ç—Ç–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É).
–ï—Å–ª–∏ —Ñ–æ—Ç–æ
