// api/webhook.js
// Vercel serverless-—Ñ—É–Ω–∫—Ü–∏—è (Node 18). –ù—É–∂–Ω—ã ENV: BOT_TOKEN, OPENAI_API_KEY

const BOT_TOKEN = process.env.BOT_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

const TG_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const TG_FILE = `https://api.telegram.org/file/bot${BOT_TOKEN}`;

const FREE_DAILY_LIMIT = 5;       // 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ñ–æ—Ç–æ/–¥–µ–Ω—å
const DEFAULT_ACTIVITY_K = 1.4;   // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç K –≤ —Ñ–æ—Ä–º—É–ª–µ –≤–µ—Å√ó24√óK

// –•—Ä–∞–Ω–∏–ª–∏—â–∞ (–≤ –ø–∞–º—è—Ç–∏ ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è MVP; –Ω–∞ –ø—Ä–æ–¥–µ –≤—ã–Ω–µ—Å–∏ –≤ –ë–î)
const usage = new Map();   // { chatId: { day:'YYYY-M-D', freeCount:int, credits:int } }
const users = new Map();   // { chatId: { weightKg, activityK, dailyTarget, consumedToday, lastReset } }
const lastTips = new Map(); // { chatId: ["—Å–æ–≤–µ—Ç1","—Å–æ–≤–µ—Ç2",...] }

module.exports = async (req, res) => {
  try {
    if (req.method !== 'POST') return res.status(405).send('Only POST');
    const update = req.body;

    // 0) –æ–±—Å–ª—É–∂–∏–º pre_checkout / successful_payment –ø–æ–∑–∂–µ (–∫–æ–≥–¥–∞ –ø–æ–¥–∫–ª—é—á–∏–º Stars)
    if (update.pre_checkout_query) {
      // Telegram —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ/–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ. –°–µ–π—á–∞—Å –≤—Å–µ–≥–¥–∞ –æ–∫.
      await fetch(`${TG_API}/answerPreCheckoutQuery`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ pre_checkout_query_id: update.pre_checkout_query.id, ok: true })
      });
      return res.json({ ok: true });
    }
    if (update.message && update.message.successful_payment) {
      // –ö–æ–≥–¥–∞ –ø–æ–¥–∫–ª—é—á–∏–º –æ–ø–ª–∞—Ç—É –ø–∞–∫–µ—Ç–∞–º–∏ ‚Äî —Ç—É—Ç —É–≤–µ–ª–∏—á–∏–º credits.
      const chat_id = update.message.chat.id;
      bumpCredits(chat_id, 50); // –ø—Ä–∏–º–µ—Ä: –¥–æ–±–∞–≤–∏—Ç—å 50 –∞–Ω–∞–ª–∏–∑–æ–≤
      await sendMessage(chat_id, `–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ –Ø –¥–æ–±–∞–≤–∏–ª 50 –∞–Ω–∞–ª–∏–∑–æ–≤ –Ω–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å.`);
      return res.json({ ok: true });
    }

    // 1) callback_query (–∫–Ω–æ–ø–∫–∏)
    if (update.callback_query) {
      const cq = update.callback_query;
      const chat_id = cq.message.chat.id;
      const data = cq.data || '';

      if (data === 'how') {
        await sendMessage(chat_id, howItWorksText());
      } else if (data === 'tips') {
        // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–≤–µ—Ç—ã, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤ lastTips
        const tips = lastTips.get(String(chat_id));
        if (Array.isArray(tips) && tips.length) {
          await sendMessage(chat_id, formatTips(tips));
        } else {
          await sendMessage(chat_id, `–°–æ–≤–µ—Ç—ã –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤—ã. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ –µ—â—ë —Ä–∞–∑ ‚Äî —è –∏—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é.`);
        }
      }
      await answerCallbackQuery(cq.id);
      return res.json({ ok: true });
    }

    // 2) –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (update.message) {
      const msg = update.message;
      const chat_id = msg.chat.id;

      // –∫–æ–º–∞–Ω–¥—ã
      if (msg.text) {
        const text = msg.text.trim();

        if (text === '/start') {
          await sendMessage(chat_id, 
`–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ—Å—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏ –ø–æ —Ñ–æ—Ç–æ üçΩÔ∏è
–ß—Ç–æ–±—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å ¬´—Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è¬ª, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–µ—Å (–≤ –∫–≥).

–ù–∞–ø—Ä–∏–º–µ—Ä: 72
`, {
            inline_keyboard: [
              [{ text: '‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç', callback_data: 'how' }]
            ]
          });
          return res.json({ ok: true });
        }

        if (text === '/help') {
          await sendMessage(chat_id, howItWorksText());
          return res.json({ ok: true });
        }

        if (text === '/stats') {
          const { freeCount, credits, leftFree } = getUsage(chat_id);
          const u = getUser(chat_id);
          const consumed = u.consumedToday ?? 0;
          const daily = u.dailyTarget ?? null;
          const leftKcal = daily ? Math.max(0, daily - consumed) : null;
          await sendMessage(chat_id, 
`–°–µ–≥–æ–¥–Ω—è: ${freeCount}/${FREE_DAILY_LIMIT} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤.
–ü–ª–∞—Ç–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã: ${credits}.
–°—ä–µ–¥–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ~${consumed} –∫–∫–∞–ª${leftKcal!==null ? `, –æ—Å—Ç–∞–ª–æ—Å—å ~${leftKcal} –∫–∫–∞–ª` : ''}.`);
          return res.json({ ok: true });
        }

        if (text === '/weight') {
          const u = getUser(chat_id);
          await sendMessage(chat_id, `–¢–µ–∫—É—â–∏–π –≤–µ—Å: ${u.weightKg ?? '–Ω–µ –∑–∞–¥–∞–Ω'} –∫–≥. –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≤–µ—Å –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70):`);
          // –¥–∞–ª—å—à–µ –æ—Ç–ª–æ–≤–∏–º —Å–ª–µ–¥—É—é—â–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —á–∏—Å–ª–æ
          u._awaitingWeight = true;
          setUser(chat_id, u);
          return res.json({ ok: true });
        }

        // –ï—Å–ª–∏ –∂–¥—ë–º –≤–µ—Å
        const u0 = getUser(chat_id);
        if (u0._awaitingWeight) {
          const kg = extractNumberKg(text);
          if (kg) {
            u0._awaitingWeight = false;
            u0.weightKg = kg;
            u0.activityK = u0.activityK || DEFAULT_ACTIVITY_K;
            u0.dailyTarget = Math.round(kg * 24 * u0.activityK);
            setUser(chat_id, u0);
            await sendMessage(chat_id, `–ì–æ—Ç–æ–≤–æ! –¢–≤–æ—è –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: ~${u0.dailyTarget} –∫–∫–∞–ª (—Ñ–æ—Ä–º—É–ª–∞: –≤–µ—Å√ó24√ó1.4).
–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ ‚Äî –ø–æ—Å—á–∏—Ç–∞—é –∏ –ø–æ–∫–∞–∂—É –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.`);
          } else {
            await sendMessage(chat_id, `–ù–µ –ø–æ–Ω—è–ª –≤–µ—Å. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 72`);
          }
          return res.json({ ok: true });
        }

        // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç (–Ω–µ –∫–æ–º–∞–Ω–¥–∞) ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–µ—Å
        const maybeKg = extractNumberKg(text);
        if (maybeKg) {
          const u = getUser(chat_id);
          u.weightKg = maybeKg;
          u.activityK = u.activityK || DEFAULT_ACTIVITY_K;
          u.dailyTarget = Math.round(maybeKg * 24 * u.activityK);
          setUser(chat_id, u);
          await sendMessage(chat_id, `–û—Ç–ª–∏—á–Ω–æ! –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: ~${u.dailyTarget} –∫–∫–∞–ª. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ ‚Äî –ø–æ—Å—á–∏—Ç–∞—é –∏ –ø–æ–∫–∞–∂—É –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.`);
          return res.json({ ok: true });
        }

        // –ò–Ω–∞—á–µ –ø—Ä–æ—Å–∏–º —Ñ–æ—Ç–æ
        await sendMessage(chat_id, `–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –±–ª—é–¥–∞ üì∏`);
        return res.json({ ok: true });
      }

      // —Ñ–æ—Ç–æ
      if (msg.photo && msg.photo.length) {
        // 1) –ø—Ä–æ–≤–µ—Ä–∏–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å ¬´—Å—ä–µ–¥–µ–Ω–æ¬ª
        dailyReset(chat_id);

        // 2) –ø—Ä–æ–≤–µ—Ä–∏–º –∫—Ä–µ–¥–∏—Ç—ã –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç
        const canSpend = canSpendAnalysis(chat_id);
        if (!canSpend.allowed) {
          await sendMessage(chat_id, 
`–°–µ–≥–æ–¥–Ω—è –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω (${FREE_DAILY_LIMIT}/${FREE_DAILY_LIMIT}) üö¶
–ó–∞–≤—Ç—Ä–∞ —Å–Ω–æ–≤–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ üéâ

–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–µ–π—á–∞—Å? (–ø–æ–∑–∂–µ –ø–æ–¥–∫–ª—é—á–∏–º –ø–æ–∫—É–ø–∫—É –ø–∞–∫–µ—Ç–æ–≤)
`);
          return res.json({ ok: true });
        }
        // —Å–ø–∏—Å—ã–≤–∞–µ–º
        spendOne(chat_id);

        // 3) –±–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ ‚Üí file_url
        const largest = msg.photo[msg.photo.length - 1];
        const fileId = largest.file_id;
        const filePath = await getFilePath(fileId);
        if (!filePath) {
          await sendMessage(chat_id, `–ù–µ —Å–º–æ–≥ —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.`);
          return res.json({ ok: true });
        }
        const fileUrl = `${TG_FILE}/${filePath}`;

        // 4) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI Vision
        const analysis = await analyzeImageWithOpenAI(fileUrl);

        if (analysis?.error === 'not_food') {
          await sendMessage(chat_id, `–ü–æ—Ö–æ–∂–µ, –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ –µ–¥–∞ üôÇ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ —Å–≤–µ—Ä—Ö—É, –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏.`);
          return res.json({ ok: true });
        }
        if (!analysis) {
          await sendMessage(chat_id, `–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Ä–∞–∫—É—Ä—Å –∏–ª–∏ —è—Ä—á–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ.`);
          return res.json({ ok: true });
        }

        // 5) –æ–±–Ω–æ–≤–∏–º ¬´—Å—ä–µ–¥–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è¬ª –∏ –ø–æ—Å—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫
        const kcal = Math.max(0, Math.round(analysis.calories_estimate || 0));
        const u = getUser(chat_id);
        u.consumedToday = (u.consumedToday || 0) + kcal;
        setUser(chat_id, u);
        const remaining = (u.dailyTarget!=null) ? Math.max(0, u.dailyTarget - u.consumedToday) : null;

        // —Å–æ—Ö—Ä–∞–Ω–∏–º —Å–æ–≤–µ—Ç—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏
        if (Array.isArray(analysis.tips)) lastTips.set(String(chat_id), analysis.tips);

        // 6) —Å–∫–æ–º–ø–æ–Ω—É–µ–º –æ—Ç–≤–µ—Ç (–±–µ–∑ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        const text = formatMealMessage(analysis, remaining, u.dailyTarget);
        await sendMessage(chat_id, text, {
          inline_keyboard: [
            [{ text: 'üîÅ –•–æ—á—É —Å–æ–≤–µ—Ç—ã', callback_data: 'tips' }]
          ]
        });
        return res.json({ ok: true });
      }

      // –Ω–∏ —Ç–µ–∫—Å—Ç, –Ω–∏ —Ñ–æ—Ç–æ
      await sendMessage(chat_id, `–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –±–ª—é–¥–∞ üì∏`);
      return res.json({ ok: true });
    }

    return res.json({ ok: true });
  } catch (e) {
    console.error(e);
    return res.status(200).json({ ok: true }); // —á—Ç–æ–±—ã TG –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª
  }
};

// ====== Telegram helpers ======
async function sendMessage(chat_id, text, replyMarkup) {
  const body = { chat_id, text };
  if (replyMarkup) body.reply_markup = replyMarkup;
  await fetch(`${TG_API}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(body)
  });
}
async function answerCallbackQuery(id) {
  await fetch(`${TG_API}/answerCallbackQuery`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ callback_query_id: id })
  });
}
async function getFilePath(file_id) {
  const r = await fetch(`${TG_API}/getFile?file_id=${encodeURIComponent(file_id)}`);
  const j = await r.json();
  return j?.ok && j?.result?.file_path ? j.result.file_path : null;
}

// ====== OpenAI Vision ======
async function analyzeImageWithOpenAI(imageUrl) {
  try {
    const systemPrompt = `
–¢—ã ‚Äì –¥–∏–µ—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ù–∞ –≤—Ö–æ–¥–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ –±–ª—é–¥–∞.
–û—Ü–µ–Ω–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ –∫–∞–ª–æ—Ä–∏–∏ –∏ –º–∞–∫—Ä–æ—Å—ã –Ω–∞ –ø—Ä–∏–≤—ã—á–Ω—É—é –ø–æ—Ä—Ü–∏—é –∏ –¥–∞–π 2‚Äì3 –ø—Ä–æ—Å—Ç—ã—Ö —Å–æ–≤–µ—Ç–∞.
–ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –µ–¥–∞ ‚Äî –≤–µ—Ä–Ω–∏ {"error":"not_food"}.
–í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ JSON —Å –ø–æ–ª—è–º–∏:
{
 "dish_name": "—Å—Ç—Ä–æ–∫–∞",
 "calories_estimate": —á–∏—Å–ª–æ,
 "macros_estimate": {"protein_g": —á–∏—Å–ª–æ, "fat_g": —á–∏—Å–ª–æ, "carbs_g": —á–∏—Å–ª–æ},
 "portion_estimate_g": —á–∏—Å–ª–æ | null,
 "tips": ["—Å–æ–≤–µ—Ç1","—Å–æ–≤–µ—Ç2","—Å–æ–≤–µ—Ç3"],
 "uncertainty_note": "—Å—Ç—Ä–æ–∫–∞"
}`;
    const userPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–æ—Ç–æ –±–ª—é–¥–∞ –∏ –≤–µ—Ä–Ω–∏ JSON —Å—Ç—Ä–æ–≥–æ –ø–æ —Å—Ö–µ–º–µ. –ï—Å–ª–∏ –Ω–µ –µ–¥–∞ ‚Äî {"error":"not_food"}.`;

    const r = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        response_format: { type: 'json_object' },
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: [
              { type: 'text', text: userPrompt },
              { type: 'image_url', image_url: { url: imageUrl } }
            ]
          }
        ],
        temperature: 0.3
      })
    });
    const j = await r.json();
    const content = j?.choices?.[0]?.message?.content;
    if (!content) return null;
    return JSON.parse(content);
  } catch (e) {
    console.error('OpenAI error', e);
    return null;
  }
}

// ====== –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ ======
function getUser(chat_id) {
  const key = String(chat_id);
  const u = users.get(key) || {};
  if (!u.activityK) u.activityK = DEFAULT_ACTIVITY_K;
  if (!u.lastReset) u.lastReset = todayKey();
  return u;
}
function setUser(chat_id, data) {
  users.set(String(chat_id), data);
}
function dailyReset(chat_id) {
  const u = getUser(chat_id);
  const today = todayKey();
  if (u.lastReset !== today) {
    u.lastReset = today;
    u.consumedToday = 0;
    setUser(chat_id, u);
  }
}
function extractNumberKg(text) {
  const m = (text || '').replace(',', '.').match(/(\d+(\.\d+)?)/);
  if (!m) return null;
  const kg = parseFloat(m[1]);
  if (!kg || kg < 20 || kg > 300) return null; // –ø—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
  return kg;
}
function getUsage(chat_id) {
  const key = String(chat_id);
  const today = todayKey();
  let u = usage.get(key);
  if (!u || u.day !== today) {
    u = { day: today, freeCount: 0, credits: u?.credits || 0 };
    usage.set(key, u);
  }
  return { freeCount: u.freeCount, credits: u.credits, leftFree: Math.max(0, FREE_DAILY_LIMIT - u.freeCount) };
}
function canSpendAnalysis(chat_id) {
  const key = String(chat_id);
  const today = todayKey();
  let u = usage.get(key);
  if (!u || u.day !== today) {
    u = { day: today, freeCount: 0, credits: u?.credits || 0 };
    usage.set(key, u);
  }
  if (u.credits > 0) return { allowed: true, mode: 'credit' };
  if (u.freeCount < FREE_DAILY_LIMIT) return { allowed: true, mode: 'free' };
  return { allowed: false };
}
function spendOne(chat_id) {
  const key = String(chat_id);
  const u = usage.get(key);
  if (u.credits > 0) u.credits -= 1;
  else u.freeCount += 1;
  usage.set(key, u);
}
function bumpCredits(chat_id, n) {
  const key = String(chat_id);
  const today = todayKey();
  let u = usage.get(key);
  if (!u || u.day !== today) u = { day: today, freeCount: 0, credits: 0 };
  u.credits += n;
  usage.set(key, u);
}

function formatMealMessage(a, remaining, dailyTarget) {
  const name = a.dish_name || '–ë–ª—é–¥–æ';
  const kcal = a.calories_estimate ? Math.round(a.calories_estimate) : '‚Äî';
  const p = a.macros_estimate?.protein_g ?? '‚Äî';
  const f = a.macros_estimate?.fat_g ?? '‚Äî';
  const c = a.macros_estimate?.carbs_g ?? '‚Äî';
  const portion = a.portion_estimate_g ? `–ü–æ—Ä—Ü–∏—è: ~${Math.round(a.portion_estimate_g)} –≥\n` : '';
  const bar = (remaining!=null && dailyTarget) ? progressBar(dailyTarget-remaining, dailyTarget) : '';
  const left = (remaining!=null) ? `–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ~${remaining} –∫–∫–∞–ª ${bar}\n` : `(–ß—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –∑–∞ –¥–µ–Ω—å ‚Äî —É–∫–∞–∂–∏ –≤–µ—Å: /weight)\n`;

  return (
`üçΩÔ∏è ${name}
‚âà ${kcal} –∫–∫–∞–ª (¬±15%)
–ë–ñ–£ (–ø—Ä–∏–±–ª.): –ë ${p} –≥, –ñ ${f} –≥, –£ ${c} –≥
${portion}${left}
‚ö†Ô∏è –≠—Ç–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞, –Ω–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Å–æ–≤–µ—Ç.`
  );
}
function formatTips(tips) {
  return `–ò–¥–µ–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:\n${tips.map(t => `‚Ä¢ ${t}`).join('\n')}`;
}
function progressBar(consumed, total) {
  const p = Math.max(0, Math.min(1, consumed / total));
  const filled = Math.round(p * 5); // 5 —Å–µ–≥–º–µ–Ω—Ç–æ–≤
  return 'üîã ' + '‚ñà'.repeat(filled) + '‚ñë'.repeat(5 - filled);
}
function todayKey() {
  const d = new Date();
  return `${d.getFullYear()}-${d.getMonth()+1}-${d.getDate()}`;
}
